#!/bin/bash
# deploy.sh - Sistema de Cursos MAAT - Panel de Control
# VERSI√ìN SEGURA - CON PROTECCI√ìN Y RESTAURACI√ìN DE BD

# Colores para el men√∫
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuraci√≥n
ENV_FILE=".env"
CONFIGURED_FILE=".system-configured"
BACKUP_DIR="backups"
LOCK_FILE=".deploy-lock"

# Funci√≥n para mostrar header
show_header() {
    clear
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë           SISTEMA DE CURSOS MAAT             ‚ïë"
    echo "‚ïë              Panel de Control                ‚ïë"
    echo "‚ïë           üõ°Ô∏è VERSI√ìN SEGURAüõ°Ô∏è             ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# ‚úÖ FUNCI√ìN MEJORADA: Verificar salud de la base de datos
check_database_health() {
    echo -e "${YELLOW}üîç Verificando salud de la base de datos...${NC}"
    
    if ! docker ps | grep -q cursos_postgres; then
        echo -e "${RED}‚ùå PostgreSQL no est√° corriendo${NC}"
        return 1
    fi
    
    # Verificar que la base de datos existe y es accesible
    if docker exec cursos_postgres psql -U postgres -d sistema_cursos -c "SELECT 1;" &>/dev/null; then
        echo -e "${GREEN}‚úÖ Base de datos 'sistema_cursos' accesible${NC}"
        return 0
    else
        echo -e "${RED}‚ùå ALERTA: Base de datos 'sistema_cursos' NO encontrada${NC}"
        return 1
    fi
}

# ‚úÖ FUNCI√ìN MEJORADA: Crear backup autom√°tico con verificaci√≥n
create_automatic_backup() {
    local context="$1"
    echo -e "${YELLOW}üíæ Creando backup autom√°tico ($context)...${NC}"
    
    mkdir -p "$BACKUP_DIR"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$BACKUP_DIR/auto_backup_${context}_${timestamp}.sql"
    
    if docker exec cursos_postgres pg_dump -U postgres sistema_cursos > "$backup_file" 2>/dev/null; then
        gzip "$backup_file"
        echo -e "${GREEN}‚úÖ Backup autom√°tico creado: ${backup_file}.gz${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No se pudo crear backup autom√°tico${NC}"
        rm -f "$backup_file"
        return 1
    fi
}

# ‚úÖ FUNCI√ìN NUEVA: Crear backup de emergencia OBLIGATORIO
create_emergency_backup() {
    local operation="$1"
    echo -e "${YELLOW}üö® CREANDO RESPALDO DE EMERGENCIA...${NC}"
    
    mkdir -p "$BACKUP_DIR"
    local backup_file="$BACKUP_DIR/EMERGENCY_${operation}_$(date +"%Y%m%d_%H%M%S").sql"
    
    if ! docker exec cursos_postgres pg_dump -U postgres sistema_cursos > "$backup_file" 2>/dev/null; then
        echo -e "${RED}‚ùå CR√çTICO: No se pudo crear respaldo de emergencia${NC}"
        echo -e "${RED}üö® NO CONTIN√öES LA OPERACI√ìN${NC}"
        return 1
    fi
    
    gzip "$backup_file"
    echo -e "${GREEN}‚úÖ Respaldo de emergencia creado: ${backup_file}.gz${NC}"
    return 0
}

# ‚úÖ FUNCI√ìN NUEVA: Restaurar Base de Datos
restore_database() {
    show_header
    echo -e "${PURPLE}üîÑ RESTAURAR BASE DE DATOS${NC}"
    echo "=========================================="
    
    # Verificar que hay backups
    if [ ! -d "$BACKUP_DIR" ] || [ -z "$(ls -A $BACKUP_DIR/*.sql.gz 2>/dev/null)" ]; then
        echo -e "${RED}‚ùå No hay backups disponibles para restaurar${NC}"
        read -p "Presiona Enter para volver al men√∫..."
        return 1
    fi
    
    # Listar backups disponibles
    echo -e "${CYAN}üìã Backups disponibles:${NC}"
    local backups=($(ls -t $BACKUP_DIR/*.sql.gz))
    local i=1
    for backup in "${backups[@]}"; do
        echo "  $i) $(basename $backup) ($(du -h $backup | cut -f1))"
        ((i++))
    done
    
    echo ""
    read -p "Selecciona el n√∫mero del backup a restaurar (1-$((i-1))): " backup_choice
    
    # Validar selecci√≥n
    if [[ ! $backup_choice =~ ^[0-9]+$ ]] || [ $backup_choice -lt 1 ] || [ $backup_choice -ge $i ]; then
        echo -e "${RED}‚ùå Selecci√≥n inv√°lida${NC}"
        read -p "Presiona Enter para volver al men√∫..."
        return 1
    fi
    
    local selected_backup="${backups[$((backup_choice-1))]}"
    
    echo ""
    echo -e "${YELLOW}üì¶ Backup seleccionado: $(basename $selected_backup)${NC}"
    echo -e "${RED}üö® ADVERTENCIA: Esta acci√≥n SOBREESCRIBIR√Å la base de datos actual${NC}"
    echo -e "${RED}üö® Todos los datos posteriores al backup se PERDER√ÅN${NC}"
    echo ""
    read -p "¬øEst√°s ABSOLUTAMENTE seguro? Escribe 'RESTAURAR-BD': " confirmation
    
    if [ "$confirmation" != "RESTAURAR-BD" ]; then
        echo -e "${YELLOW}‚ùå Restauraci√≥n cancelada${NC}"
        read -p "Presiona Enter para volver al men√∫..."
        return 1
    fi
    
    # ‚úÖ CREAR BACKUP DE LA BD ACTUAL (por si acaso)
    echo -e "${YELLOW}üíæ Creando backup de la base de datos actual...${NC}"
    local current_backup="$BACKUP_DIR/pre_restore_$(date +"%Y%m%d_%H%M%S").sql"
    docker exec cursos_postgres pg_dump -U postgres sistema_cursos > "$current_backup" 2>/dev/null && gzip "$current_backup"
    echo -e "${GREEN}‚úÖ Backup de seguridad creado${NC}"
    
    # Detener servicios que usan la BD
    echo -e "${YELLOW}‚è∏Ô∏è  Deteniendo servicios...${NC}"
    docker compose stop backend
    
    # Restaurar backup
    echo -e "${YELLOW}üîÑ Restaurando base de datos...${NC}"
    if gunzip -c "$selected_backup" | docker exec -i cursos_postgres psql -U postgres sistema_cursos; then
        echo -e "${GREEN}‚úÖ Base de datos restaurada exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error al restaurar la base de datos${NC}"
        echo -e "${YELLOW}üí° Se cre√≥ un backup pre-restauraci√≥n: $(basename $current_backup).gz${NC}"
    fi
    
    # Reiniciar servicios
    echo -e "${YELLOW}üöÄ Reiniciando servicios...${NC}"
    docker compose start backend
    
    # Verificar restauraci√≥n
    echo -e "${YELLOW}üîç Verificando restauraci√≥n...${NC}"
    sleep 5
    if check_database_health; then
        echo -e "${GREEN}üéâ ¬°RESTAURACI√ìN COMPLETADA EXITOSAMENTE!${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Advertencia: Verificar estado del sistema despu√©s de la restauraci√≥n${NC}"
    fi
    
    read -p "Presiona Enter para volver al men√∫..."
}

# ‚úÖ FUNCI√ìN MEJORADA: Protecci√≥n contra eliminaci√≥n de BD
protect_database() {
    local operation="$1"
    
    echo -e "${PURPLE}üõ°Ô∏è  ACTIVANDO PROTECCI√ìN DE BASE DE DATOS${NC}"
    echo "=========================================="
    
    # 1. Verificar que PostgreSQL est√© corriendo
    if ! docker ps | grep -q cursos_postgres; then
        echo -e "${RED}‚ùå CR√çTICO: PostgreSQL no est√° corriendo${NC}"
        return 1
    fi
    
    # 2. Verificar que la BD existe
    if ! check_database_health; then
        echo -e "${RED}üö® ALERTA CR√çTICA: Base de datos no accesible${NC}"
        echo -e "${YELLOW}üí° Posibles causas:"
        echo "   - Base de datos eliminada"
        echo "   - Problema de conexi√≥n"
        echo "   - Volumen de datos corrupto"
        echo -e "${NC}"
        
        read -p "¬øContinuar con $operation? (s/N): " confirm
        if [[ $confirm != "s" && $confirm != "S" ]]; then
            echo -e "${YELLOW}‚ùå Operaci√≥n cancelada por protecci√≥n de BD${NC}"
            return 1
        fi
    fi
    
    # 3. ‚úÖ CREAR BACKUP DE EMERGENCIA OBLIGATORIO
    if ! create_emergency_backup "$operation"; then
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Protecci√≥n de base de datos activada${NC}"
    return 0
}

# ‚úÖ FUNCI√ìN MEJORADA: Verificaci√≥n post-operaci√≥n
verify_operation_success() {
    local operation="$1"
    
    echo -e "${YELLOW}üîç Verificando resultado de $operation...${NC}"
    sleep 10  # Esperar que los servicios est√©n listos
    
    if check_database_health; then
        echo -e "${GREEN}‚úÖ $operation completado - Base de datos preservada${NC}"
        return 0
    else
        echo -e "${RED}‚ùå ALERTA: Base de datos no accesible despu√©s de $operation${NC}"
        echo -e "${YELLOW}üö® ACCI√ìN REQUERIDA: Verificar estado del sistema${NC}"
        return 1
    fi
}

# Funci√≥n para verificar si el sistema est√° configurado
is_system_configured() {
    [ -f "$CONFIGURED_FILE" ]
}

# Funci√≥n para gesti√≥n del .env
setup_environment() {
    if ! is_system_configured; then
        echo -e "${YELLOW}üöÄ CONFIGURACI√ìN INICIAL DETECTADA${NC}"
        
        if [ ! -f "$ENV_FILE" ]; then
            echo -e "${RED}‚ùå Error: Archivo $ENV_FILE no encontrado${NC}"
            echo "Para la primera ejecuci√≥n necesitas:"
            echo "1. Crear un archivo $ENV_FILE con la configuraci√≥n"
            echo "2. Ejecutar el deploy nuevamente"
            exit 1
        fi
        
        echo -e "${GREEN}‚úÖ $ENV_FILE encontrado - Configurando sistema...${NC}"
        
        # Marcar sistema como configurado
        touch "$CONFIGURED_FILE"
        
        # Construir con la configuraci√≥n inicial
        echo -e "${YELLOW}üê≥ Construyendo servicios con configuraci√≥n inicial...${NC}"
        docker compose build --build-arg USER_ID=1001 --build-arg GROUP_ID=1001 --no-cache backend
        
    else
        echo -e "${GREEN}‚úÖ Sistema ya configurado - Modo actualizaci√≥n${NC}"
        
        # En modo actualizaci√≥n, asegurarse de que no hay .env
        if [ -f "$ENV_FILE" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Eliminando $ENV_FILE temporal...${NC}"
            rm "$ENV_FILE"
        fi
    fi
}

# Funci√≥n para limpiar .env al final
cleanup_environment() {
    if ! is_system_configured; then
        if [ -f "$ENV_FILE" ]; then
            echo -e "${YELLOW}üóëÔ∏è  Eliminando $ENV_FILE por seguridad...${NC}"
            rm "$ENV_FILE"
            echo -e "${GREEN}‚úÖ $ENV_FILE eliminado - Sistema seguro${NC}"
        fi
    fi
}

# ‚úÖ FUNCI√ìN MEJORADA: Liberar espacio SEGURO
free_space_safe() {
    show_header
    echo -e "${PURPLE}üîß LIBERANDO ESPACIO SEGURO${NC}"
    echo "=========================================="
    echo -e "${YELLOW}‚ö†Ô∏è  Esta acci√≥n limpiar√° solo elementos innecesarios${NC}"
    echo -e "${GREEN}‚úÖ BASE DE DATOS PRESERVADA${NC}"
    echo ""
    
    # ‚úÖ ACTIVAR PROTECCI√ìN
    if ! protect_database "limpieza_segura"; then
        return 1
    fi
    
    # Mostrar espacio actual
    echo -e "${CYAN}üìä Espacio actual utilizado por Docker:${NC}"
    docker system df
    
    echo ""
    read -p "¬øContinuar con la limpieza segura? (s/n): " confirm
    
    if [[ $confirm != "s" && $confirm != "S" ]]; then
        echo -e "${YELLOW}‚ùå Limpieza cancelada${NC}"
        read -p "Presiona Enter para volver al men√∫..."
        return
    fi
    
    echo -e "${YELLOW}üßπ Iniciando limpieza segura...${NC}"
    
    # Limpieza SEGURA (sin tocar vol√∫menes)
    docker container prune -f
    docker image prune -f
    docker network prune -f
    docker builder prune -f
    
    # Limpiar logs y cache de forma segura
    find /var/lib/docker/containers/ -name "*.log" -type f -size +100M -delete 2>/dev/null || true
    docker exec cursos_backend npm cache clean --force 2>/dev/null || true
    
    # Mostrar espacio liberado
    echo ""
    echo -e "${CYAN}üìä Espacio despu√©s de la limpieza:${NC}"
    docker system df
    
    # ‚úÖ VERIFICAR QUE LA BD SIGUE FUNCIONANDO
    if verify_operation_success "limpieza"; then
        echo -e "${GREEN}üéâ ¬°Limpieza segura completada!${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Advertencia: Verificar estado de la base de datos${NC}"
    fi
    
    read -p "Presiona Enter para volver al men√∫..."
}

# ‚úÖ FUNCI√ìN MEJORADA: Respaldar Base de Datos
backup_database() {
    show_header
    echo -e "${CYAN}üíæ RESPALDO DE BASE DE DATOS${NC}"
    echo "=========================================="
    
    if ! protect_database "respaldo"; then
        read -p "Presiona Enter para volver al men√∫..."
        return 1
    fi
    
    # El backup ya se cre√≥ en protect_database, mostrar info
    echo ""
    echo -e "${GREEN}‚úÖ Respaldo completado exitosamente!${NC}"
    
    # Listar √∫ltimos backups
    echo -e "${CYAN}üìã √öltimos respaldos disponibles:${NC}"
    ls -laht "$BACKUP_DIR"/*.sql.gz 2>/dev/null | head -5 || echo "No hay respaldos anteriores"
    
    read -p "Presiona Enter para volver al men√∫..."
}

# ‚úÖ FUNCI√ìN MEJORADA SEGURA: Actualizar desde Git
update_from_git() {
    show_header
    echo -e "${BLUE}üì• ACTUALIZACI√ìN SEGURA DESDE GIT${NC}"
    echo "=========================================="
    
    if ! is_system_configured; then
        echo -e "${RED}‚ùå Error: Sistema no configurado${NC}"
        echo "Primero debes instalar el sistema con la opci√≥n 1"
        read -p "Presiona Enter para continuar..."
        return
    fi
    
    # ‚úÖ PROTECCI√ìN ANTES DE ACTUALIZAR
    if ! protect_database "actualizacion_git"; then
        echo -e "${RED}‚ùå Actualizaci√≥n cancelada por protecci√≥n de BD${NC}"
        read -p "Presiona Enter para continuar..."
        return 1
    fi
    
    echo -e "${YELLOW}üì¶ Descargando actualizaciones desde Git...${NC}"
    
    if git pull origin main; then
        echo -e "${GREEN}‚úÖ C√≥digo actualizado desde Git${NC}"
        echo -e "${YELLOW}üîÑ Reconstruyendo servicios...${NC}"
        
        # ‚úÖ M√âTODO SEGURO: Construir sin detener
        docker compose build --no-cache backend
        
        echo -e "${YELLOW}üöÄ Reiniciando servicios...${NC}"
        # ‚úÖ M√âTODO SEGURO: Recargar solo el backend
        docker compose up -d --no-deps backend
        
        # ‚úÖ VERIFICAR QUE TODO FUNCIONE
        if verify_operation_success "actualizaci√≥n_git"; then
            echo -e "${GREEN}‚úÖ Actualizaci√≥n completada exitosamente${NC}"
        else
            echo -e "${RED}‚ö†Ô∏è  Actualizaci√≥n completada con advertencias${NC}"
            echo -e "${YELLOW}üí° Verificar el estado del sistema${NC}"
        fi
        
    else
        echo -e "${RED}‚ùå Error al actualizar desde Git${NC}"
    fi
    
    read -p "Presiona Enter para continuar..."
}

# ‚úÖ FUNCI√ìN MEJORADA SEGURA: Instalar/Actualizar Sistema
install_or_update_system() {
    show_header
    
    if is_system_configured; then
        echo -e "${BLUE}üîÑ ACTUALIZACI√ìN SEGURA DEL SISTEMA${NC}"
        # ‚úÖ PROTECCI√ìN EN MODO ACTUALIZACI√ìN
        if ! protect_database "actualizacion_sistema"; then
            echo -e "${RED}‚ùå Actualizaci√≥n cancelada por protecci√≥n de BD${NC}"
            read -p "Presiona Enter para continuar..."
            return 1
        fi
    else
        echo -e "${BLUE}üöÄ INSTALANDO SISTEMA${NC}"
    fi
    
    echo "=========================================="
    
    # Gesti√≥n del entorno
    setup_environment
    
    # Construir servicios
    if is_system_configured; then
        echo -e "${YELLOW}üê≥ Actualizando servicios...${NC}"
        docker compose build --no-cache backend
    else
        echo -e "${YELLOW}üê≥ Instalando servicios...${NC}"
        docker compose build --no-cache backend
    fi
    
    # Levantar servicios (m√©todo seguro)
    echo -e "${YELLOW}üê≥ Levantando servicios...${NC}"
    docker compose up -d
    
    echo -e "${YELLOW}‚è≥ Esperando que los servicios est√©n listos...${NC}"
    sleep 15
    
    # Verificar permisos
    echo -e "${YELLOW}üîß Verificando y corrigiendo permisos...${NC}"
    fix_permissions
    
    # Verificaci√≥n final
    echo -e "${YELLOW}üîç Verificando despliegue...${NC}"
    docker compose ps
    
    # ‚úÖ VERIFICACI√ìN DE BD EN MODO ACTUALIZACI√ìN
    if is_system_configured; then
        if verify_operation_success "actualizaci√≥n_sistema"; then
            echo -e "${GREEN}‚úÖ SISTEMA ACTUALIZADO CORRECTAMENTE${NC}"
        else
            echo -e "${RED}‚ö†Ô∏è  SISTEMA ACTUALIZADO CON ADVERTENCIAS${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ SISTEMA INSTALADO CORRECTAMENTE${NC}"
    fi
    
    echo "üåê URL: https://moviesplus.xyz"
    echo "üë§ Admin: admin / admin1234"
    
    # Limpiar .env al final
    cleanup_environment
    
    read -p "Presiona Enter para continuar..."
}

# ‚úÖ FUNCI√ìN MEJORADA: Resetear sistema
reset_system() {
    show_header
    echo -e "${RED}‚ö†Ô∏è  RESETEO DEL SISTEMA${NC}"
    echo "=========================================="
    echo "ESTA ACCI√ìN ELIMINAR√Å TODA LA CONFIGURACI√ìN"
    echo ""
    echo -e "${RED}üö® OPCIONES:${NC}"
    echo "1) Reset seguro (preserva BD)"
    echo "2) Reset completo (elimina TODO incluyendo BD)"
    echo "3) Cancelar"
    echo ""
    read -p "Selecciona opci√≥n (1-3): " reset_option
    
    case $reset_option in
        1)
            echo -e "${YELLOW}üóëÔ∏è  Eliminando configuraci√≥n (BD preservada)...${NC}"
            # ‚úÖ PROTECCI√ìN ANTES DE RESET
            if protect_database "reset_seguro"; then
                docker compose down  # ‚Üê SIN -v
                rm -f "$CONFIGURED_FILE"
                rm -f "$ENV_FILE"
                sudo rm -rf uploads/*
                echo -e "${GREEN}‚úÖ Sistema reseteado - BD preservada${NC}"
            else
                echo -e "${RED}‚ùå Reset cancelado por protecci√≥n de BD${NC}"
            fi
            ;;
        2)
            read -p "¬øEST√ÅS SEGURO? Esto eliminar√° TODOS los datos. Escribe 'ELIMINAR-TODO': " confirmation
            if [ "$confirmation" = "ELIMINAR-TODO" ]; then
                echo -e "${RED}üóëÔ∏è  ELIMINANDO TODO INCLUYENDO BD...${NC}"
                docker compose down -v  # ‚Üê SOLO aqu√≠ usamos -v
                rm -f "$CONFIGURED_FILE"
                rm -f "$ENV_FILE"
                sudo rm -rf uploads/*
                echo -e "${GREEN}‚úÖ Sistema completamente reseteado${NC}"
            else
                echo -e "${YELLOW}‚ùå Reset cancelado${NC}"
            fi
            ;;
        *)
            echo -e "${YELLOW}‚ùå Reset cancelado${NC}"
            ;;
    esac
    
    read -p "Presiona Enter para continuar..."
}

# ‚úÖ FUNCI√ìN MEJORADA: Ver estado con verificaci√≥n de BD
show_status() {
    show_header
    echo -e "${GREEN}üìä ESTADO DEL SISTEMA${NC}"
    echo "=========================================="
    
    if is_system_configured; then
        echo -e "${GREEN}‚úÖ Estado: CONFIGURADO${NC}"
    else
        echo -e "${YELLOW}üîÑ Estado: SIN CONFIGURAR${NC}"
    fi
    
    echo -e "${YELLOW}üê≥ Contenedores:${NC}"
    docker compose ps
    
    # ‚úÖ VERIFICACI√ìN DE BD EN ESTADO
    echo -e "${YELLOW}üóÑÔ∏è  Base de Datos:${NC}"
    if check_database_health; then
        echo -e "${GREEN}‚úÖ Salud: OPTIMA${NC}"
    else
        echo -e "${RED}‚ùå Salud: PROBLEMAS${NC}"
    fi
    
    echo -e "${YELLOW}üîó URLs:${NC}"
    echo "üåê Frontend: https://moviesplus.xyz"
    echo "üîß Backend API: https://moviesplus.xyz/api"
    
    # Mostrar espacio de Docker
    echo -e "${YELLOW}üíæ Espacio Docker:${NC}"
    docker system df
    
    # Mostrar √∫ltimos backups
    if [ -d "$BACKUP_DIR" ]; then
        echo -e "${YELLOW}üíæ √öltimos respaldos:${NC}"
        ls -laht "$BACKUP_DIR"/*.sql.gz 2>/dev/null | head -3 || echo "No hay respaldos"
    fi
    
    read -p "Presiona Enter para continuar..."
}

# üîÑ FUNCI√ìN DE PERMISOS (sin cambios)
fix_permissions() {
    echo -e "${YELLOW}üîß INICIANDO REPARACI√ìN DE PERMISOS...${NC}"
    echo "=========================================="
    sleep 1
    
    # 1. Permisos en HOST
    echo -e "${YELLOW}üìÅ Paso 1/3: Configurando permisos en HOST...${NC}"
    mkdir -p uploads public
    sudo chown -R 1001:1001 uploads/ 2>/dev/null || true
    sudo chmod -R 755 uploads/ 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Permisos en HOST configurados${NC}"
    sleep 1
    
    # 2. Verificar que el contenedor est√° corriendo
    echo -e "${YELLOW}üîç Paso 2/3: Verificando contenedor...${NC}"
    if ! docker ps | grep -q cursos_backend; then
        echo -e "${RED}‚ùå ERROR: El contenedor 'cursos_backend' no est√° corriendo${NC}"
        echo -e "${YELLOW}üí° Inicia los servicios con la opci√≥n 4 primero${NC}"
        read -p "Presiona Enter para volver al men√∫..."
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Contenedor detectado: cursos_backend${NC}"
    sleep 1
    
    # 3. Permisos en CONTENEDOR
    echo -e "${YELLOW}üê≥ Paso 3/3: Configurando permisos en CONTENEDOR...${NC}"
    echo -e "${YELLOW}‚è≥ Esto puede tomar unos segundos...${NC}"
    
    docker exec cursos_backend mkdir -p /app/uploads 2>/dev/null && echo -e "${GREEN}‚úÖ Carpeta /app/uploads creada${NC}" || echo -e "${RED}‚ùå Error creando carpeta${NC}"
    sleep 1
    
    docker exec cursos_backend chown -R node:node /app/uploads 2>/dev/null && echo -e "${GREEN}‚úÖ Ownership aplicado${NC}" || echo -e "${RED}‚ùå Error en ownership${NC}"
    sleep 1
    
    docker exec cursos_backend chmod -R 755 /app/uploads 2>/dev/null && echo -e "${GREEN}‚úÖ Permisos aplicados${NC}" || echo -e "${RED}‚ùå Error en permisos${NC}"
    sleep 1
    
    # 4. Verificaci√≥n final
    echo -e "${YELLOW}üîç Verificando resultado...${NC}"
    if docker exec cursos_backend touch /app/uploads/test-final-$(date +%s).txt 2>/dev/null; then
        echo -e "${GREEN}üéâ ¬°√âXITO! Permisos configurados correctamente${NC}"
        echo -e "${GREEN}‚úÖ Ya puedes subir im√°genes sin problemas${NC}"
    else
        echo -e "${RED}‚ùå FALLO: No se pudo verificar los permisos${NC}"
    fi
    
    echo "=========================================="
    read -p "Presiona Enter para volver al men√∫..."
}

# Men√∫ principal
main_menu() {
    while true; do
        show_header
        echo -e "${GREEN}MEN√ö PRINCIPAL - VERSI√ìN SEGURA${NC}"
        echo "=========================================="
        echo "1. üöÄ Instalar/Actualizar Sistema"
        echo "2. üì• Actualizar desde Git + Reinstalar"
        echo "3. ‚è∏Ô∏è  Detener Servicios"
        echo "4. ‚ñ∂Ô∏è  Iniciar Servicios" 
        echo "5. üìä Ver Estado"
        echo "6. üîß Corregir Permisos"
        echo "7. üìù Ver Logs"
        echo "8. üßπ Liberar Espacio Seguro"
        echo "9. üíæ Respaldar Base de Datos"
        echo "10. üîÑ Restaurar Base de Datos"
        echo "11. üóëÔ∏è  Resetear Sistema (cuidado!)"
        echo "12. ‚ùå Salir"
        echo "=========================================="
        
        read -p "Selecciona una opci√≥n (1-12): " choice
        
        case $choice in
            1) install_or_update_system ;;
            2) update_from_git ;;
            3) docker compose stop ;;
            4) docker compose up -d ;;
            5) show_status ;;
            6) fix_permissions ;;
            7) 
                echo -e "${YELLOW}üìù Mostrando logs (Ctrl+C para salir)...${NC}"
                docker compose logs -f 
                ;;
            8) free_space_safe ;;
            9) backup_database ;;
            10) restore_database ;;
            11) reset_system ;;
            12) 
                echo -e "${GREEN}üëã ¬°Hasta pronto!${NC}"
                exit 0
                ;;
            *) 
                echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"
                sleep 2
                ;;
        esac
    done
}

# Verificar requisitos
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå Error: No se encuentra docker-compose.yml${NC}"
    exit 1
fi

# Iniciar men√∫ principal
main_menu